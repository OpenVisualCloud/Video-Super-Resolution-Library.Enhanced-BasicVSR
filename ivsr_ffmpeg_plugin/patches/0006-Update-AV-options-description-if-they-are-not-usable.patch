From 8be1fc75922b7da0fde6a1feb4b699a69b137166 Mon Sep 17 00:00:00 2001
From: dahanhan <dahan.han@intel.com>
Date: Mon, 24 Apr 2023 15:15:02 +0800
Subject: [PATCH] Update AV options' description if they are not usable for
 BasicVSR model

Signed-off-by: dahanhan <dahan.han@intel.com>
---
 libavfilter/dnn/dnn_backend_common.h   |  2 +-
 libavfilter/dnn/dnn_backend_openvino.c | 10 +++++-----
 libavfilter/dnn_filter_common.h        |  2 +-
 libavfilter/vf_dnn_processing.c        |  8 ++++----
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/libavfilter/dnn/dnn_backend_common.h b/libavfilter/dnn/dnn_backend_common.h
index f45b3a5c38..8303b44278 100644
--- a/libavfilter/dnn/dnn_backend_common.h
+++ b/libavfilter/dnn/dnn_backend_common.h
@@ -30,7 +30,7 @@
 
 #define DNN_BACKEND_COMMON_OPTIONS \
     { "nireq",           "number of request",             OFFSET(options.nireq),           AV_OPT_TYPE_INT,    { .i64 = 1 },     0, INT_MAX, FLAGS }, \
-    { "async",           "use DNN async inference",       OFFSET(options.async),           AV_OPT_TYPE_BOOL,   { .i64 = 1 },     0,       1, FLAGS },
+    { "async",           "use DNN async inference, NOT usable for BasicVSR model",       OFFSET(options.async),           AV_OPT_TYPE_BOOL,   { .i64 = 1 },     0,       1, FLAGS },
 
 // one task for one function call from dnn interface
 typedef struct TaskItem {
diff --git a/libavfilter/dnn/dnn_backend_openvino.c b/libavfilter/dnn/dnn_backend_openvino.c
index d166643684..2e026f0a56 100644
--- a/libavfilter/dnn/dnn_backend_openvino.c
+++ b/libavfilter/dnn/dnn_backend_openvino.c
@@ -83,12 +83,12 @@ typedef struct OVRequestItem {
 #define OFFSET(x) offsetof(OVContext, x)
 #define FLAGS AV_OPT_FLAG_FILTERING_PARAM
 static const AVOption dnn_openvino_options[] = {
-    { "device", "device to run model", OFFSET(options.device_type), AV_OPT_TYPE_STRING, { .str = "CPU" }, 0, 0, FLAGS },
+    { "device", "device to run model, must choose one from CPU or GPU", OFFSET(options.device_type), AV_OPT_TYPE_STRING, { .str = "CPU" }, 0, 0, FLAGS },
     DNN_BACKEND_COMMON_OPTIONS
-    { "batch_size",  "batch size per request", OFFSET(options.batch_size),  AV_OPT_TYPE_INT,    { .i64 = 1 },     1, 1000, FLAGS},
-    { "input_resizable", "can input be resizable or not", OFFSET(options.input_resizable), AV_OPT_TYPE_BOOL,   { .i64 = 0 },     0, 1, FLAGS },
-    { "extension",  "extension lib file full path", OFFSET(options.extension),  AV_OPT_TYPE_STRING,    { .str = "../../ivsr_gpu_opt/based_on_openvino_2022.1/openvino/bin/intel64/Release/lib/libcustom_extension.so" },     0, 0, FLAGS},
-    { "op_xml",  "custom op xml file full path", OFFSET(options.op_xml),  AV_OPT_TYPE_STRING,    { .str = "../../ivsr_gpu_opt/based_on_openvino_2022.1/openvino/flow_warp_custom_op/flow_warp.xml" },     0, 0, FLAGS},
+    { "batch_size",  "batch size per request, NOT usable for BasicVSR model", OFFSET(options.batch_size),  AV_OPT_TYPE_INT,    { .i64 = 1 },     1, 1000, FLAGS},
+    { "input_resizable", "can input be resizable or not, NOT usable for BasicVSR model", OFFSET(options.input_resizable), AV_OPT_TYPE_BOOL,   { .i64 = 0 },     0, 1, FLAGS },
+    { "extension",  "extension lib file full path, NOT usable for BasicVSR model", OFFSET(options.extension),  AV_OPT_TYPE_STRING,    { .str = "../../ivsr_gpu_opt/based_on_openvino_2022.1/openvino/bin/intel64/Release/lib/libcustom_extension.so" },     0, 0, FLAGS},
+    { "op_xml",  "custom op xml file full path, NOT usable for BasicVSR model", OFFSET(options.op_xml),  AV_OPT_TYPE_STRING,    { .str = "../../ivsr_gpu_opt/based_on_openvino_2022.1/openvino/flow_warp_custom_op/flow_warp.xml" },     0, 0, FLAGS},
     { NULL }
 };
 
diff --git a/libavfilter/dnn_filter_common.h b/libavfilter/dnn_filter_common.h
index ea58c03d5e..df8977e6f1 100644
--- a/libavfilter/dnn_filter_common.h
+++ b/libavfilter/dnn_filter_common.h
@@ -51,7 +51,7 @@ typedef struct DnnContext {
 #define DNN_COMMON_OPTIONS \
     { "model",              "path to model file",         OFFSET(model_filename),   AV_OPT_TYPE_STRING,    { .str = NULL }, 0, 0, FLAGS },\
     { "input",              "input name of the model",    OFFSET(model_inputname),  AV_OPT_TYPE_STRING,    { .str = NULL }, 0, 0, FLAGS },\
-    { "input_nb",           "input number of the mode",   OFFSET(nb_inputs),        AV_OPT_TYPE_INT,       { .i64 = 1 },    0, 48, FLAGS },\
+    { "input_nb",           "input number of the model, not usable for BasicVSR model",   OFFSET(nb_inputs),        AV_OPT_TYPE_INT,       { .i64 = 1 },    0, 48, FLAGS },\
     { "output",             "output name of the model",   OFFSET(model_outputnames_string), AV_OPT_TYPE_STRING, { .str = NULL }, 0, 0, FLAGS },\
     { "backend_configs",    "backend configs",            OFFSET(backend_options),  AV_OPT_TYPE_STRING,    { .str = NULL }, 0, 0, FLAGS },\
     { "options", "backend configs (deprecated, use backend_configs)", OFFSET(backend_options),  AV_OPT_TYPE_STRING, { .str = NULL }, 0, 0, FLAGS | AV_OPT_FLAG_DEPRECATED},\
diff --git a/libavfilter/vf_dnn_processing.c b/libavfilter/vf_dnn_processing.c
index 6725bc9fb3..0c8100799e 100644
--- a/libavfilter/vf_dnn_processing.c
+++ b/libavfilter/vf_dnn_processing.c
@@ -46,7 +46,7 @@ typedef struct DnnProcessingContext {
 #define OFFSET(x) offsetof(DnnProcessingContext, dnnctx.x)
 #define FLAGS AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM
 static const AVOption dnn_processing_options[] = {
-    { "dnn_backend", "DNN backend",                OFFSET(backend_type),     AV_OPT_TYPE_INT,       { .i64 = 0 },    INT_MIN, INT_MAX, FLAGS, "backend" },
+    { "dnn_backend", "DNN backend, must be set to openvino if BasicVSR model is used",                OFFSET(backend_type),     AV_OPT_TYPE_INT,       { .i64 = 0 },    INT_MIN, INT_MAX, FLAGS, "backend" },
     { "native",      "native backend flag",        0,                        AV_OPT_TYPE_CONST,     { .i64 = 0 },    0, 0, FLAGS, "backend" },
 #if (CONFIG_LIBTENSORFLOW == 1)
     { "tensorflow",  "tensorflow backend flag",    0,                        AV_OPT_TYPE_CONST,     { .i64 = 1 },    0, 0, FLAGS, "backend" },
@@ -55,11 +55,11 @@ static const AVOption dnn_processing_options[] = {
     { "openvino",    "openvino backend flag",      0,                        AV_OPT_TYPE_CONST,     { .i64 = 2 },    0, 0, FLAGS, "backend" },
 #endif
     DNN_COMMON_OPTIONS
-    { "nif",         "number of input frames",     OFFSET(nif),              AV_OPT_TYPE_INT,       { .i64 = 3 },    1,      INT_MAX, FLAGS },
+    { "nif",         "number of input frames, NOT usable for BasicVSR model",     OFFSET(nif),              AV_OPT_TYPE_INT,       { .i64 = 3 },    1,      INT_MAX, FLAGS },
     { "input_width", "input video width",     OFFSET(input_width),              AV_OPT_TYPE_INT,       { .i64 = 1920 },    1, INT_MAX, FLAGS },
     { "input_height","input video height",     OFFSET(input_height),              AV_OPT_TYPE_INT,       { .i64 = 1080 },    1, INT_MAX, FLAGS },
-    { "output_width","output video width",     OFFSET(output_width),              AV_OPT_TYPE_INT,       { .i64 = 3840 },    1, INT_MAX, FLAGS },
-    { "output_height", "output video height",     OFFSET(output_height),              AV_OPT_TYPE_INT,       { .i64 = 2160 },    1, INT_MAX, FLAGS },
+    { "output_width","output video width, NOT usable for BasicVSR model",     OFFSET(output_width),              AV_OPT_TYPE_INT,       { .i64 = 3840 },    1, INT_MAX, FLAGS },
+    { "output_height", "output video height, NOT usable for BasicVSR model'",     OFFSET(output_height),              AV_OPT_TYPE_INT,       { .i64 = 2160 },    1, INT_MAX, FLAGS },
     { NULL }
 };
 
-- 
2.34.1

