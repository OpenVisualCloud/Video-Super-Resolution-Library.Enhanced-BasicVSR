From c7d320ba5a7a1fba09d04149e6176a83d1d2b123 Mon Sep 17 00:00:00 2001
From: dahanhan <dahan.han@intel.com>
Date: Thu, 6 Apr 2023 15:50:33 +0800
Subject: [PATCH] Enable multi-frame fifo with BasicVSR model

The BasicVSR model requires multi-frame input. Modify the filter
vf_dnn_process to enable it

Signed-off-by: dahanhan <dahan.han@intel.com>
---
 libavfilter/dnn/dnn_backend_common.c   |  19 +-
 libavfilter/dnn/dnn_backend_common.h   |   3 +
 libavfilter/dnn/dnn_backend_native.h   |   2 +-
 libavfilter/dnn/dnn_backend_openvino.c | 237 +++++++++++++++++++++----
 libavfilter/dnn_filter_common.c        |  13 ++
 libavfilter/dnn_filter_common.h        |   5 +
 libavfilter/dnn_interface.h            |   4 +
 libavfilter/vf_dnn_processing.c        |  65 ++++++-
 8 files changed, 305 insertions(+), 43 deletions(-)

diff --git a/libavfilter/dnn/dnn_backend_common.c b/libavfilter/dnn/dnn_backend_common.c
index 91a4a3c4bf..56e498af1b 100644
--- a/libavfilter/dnn/dnn_backend_common.c
+++ b/libavfilter/dnn/dnn_backend_common.c
@@ -66,9 +66,14 @@ int ff_dnn_fill_task(TaskItem *task, DNNExecBaseParams *exec_params, void *backe
     task->input_name = exec_params->input_name;
     task->in_frame = exec_params->in_frame;
     task->out_frame = exec_params->out_frame;
+    task->in_queue = exec_params->in_queue;
+    task->out_queue = exec_params->out_queue;
     task->model = backend_model;
+    task->nb_input = exec_params->nb_input;
     task->nb_output = exec_params->nb_output;
-    task->output_names = exec_params->output_names;
+
+    task->output_names = av_malloc(sizeof(*task->output_names));
+    *task->output_names = *exec_params->output_names;
 
     return 0;
 }
@@ -142,6 +147,7 @@ int ff_dnn_start_inference_async(void *ctx, DNNAsyncExecModule *async_module)
 DNNAsyncStatusType ff_dnn_get_result_common(Queue *task_queue, AVFrame **in, AVFrame **out)
 {
     TaskItem *task = ff_queue_peek_front(task_queue);
+    int ret;
 
     if (!task) {
         return DAST_EMPTY_QUEUE;
@@ -152,9 +158,12 @@ DNNAsyncStatusType ff_dnn_get_result_common(Queue *task_queue, AVFrame **in, AVF
     }
 
     *in = task->in_frame;
-    *out = task->out_frame;
-    ff_queue_pop_front(task_queue);
-    av_freep(&task);
+    //if (av_fifo_can_read(task->out_queue))
+    //    ret = av_fifo_read(task->out_queue, out, 1);
+    if (!av_fifo_can_read(task->out_queue)) {
+        ff_queue_pop_front(task_queue);
+        av_freep(&task);
+    }
 
     return DAST_SUCCESS;
 }
@@ -182,5 +191,5 @@ int ff_dnn_fill_gettingoutput_task(TaskItem *task, DNNExecBaseParams *exec_param
     exec_params->in_frame = in_frame;
     exec_params->out_frame = out_frame;
 
-    return ff_dnn_fill_task(task, exec_params, backend_model, 0, 0);
+    return ff_dnn_fill_task(task, exec_params, backend_model, 1, 0);
 }
diff --git a/libavfilter/dnn/dnn_backend_common.h b/libavfilter/dnn/dnn_backend_common.h
index 42c67c7040..b3ff29d904 100644
--- a/libavfilter/dnn/dnn_backend_common.h
+++ b/libavfilter/dnn/dnn_backend_common.h
@@ -37,10 +37,13 @@ typedef struct TaskItem {
     void *model; // model for the backend
     AVFrame *in_frame;
     AVFrame *out_frame;
+    AVFifo *in_queue;
+    AVFifo *out_queue;
     const char *input_name;
     const char **output_names;
     uint8_t async;
     uint8_t do_ioproc;
+    uint32_t nb_input;
     uint32_t nb_output;
     uint32_t inference_todo;
     uint32_t inference_done;
diff --git a/libavfilter/dnn/dnn_backend_native.h b/libavfilter/dnn/dnn_backend_native.h
index 75bd9a44f7..ea5aa8217c 100644
--- a/libavfilter/dnn/dnn_backend_native.h
+++ b/libavfilter/dnn/dnn_backend_native.h
@@ -71,7 +71,7 @@ typedef struct DnnOperand{
      * there are two memory layouts, NHWC or NCHW, so we use dims,
      * dims[0] is Number.
      */
-    int32_t dims[4];
+    int32_t dims[5];
 
     /**
      * input/output/intermediate operand of the network
diff --git a/libavfilter/dnn/dnn_backend_openvino.c b/libavfilter/dnn/dnn_backend_openvino.c
index cf012aca4c..77585e3453 100644
--- a/libavfilter/dnn/dnn_backend_openvino.c
+++ b/libavfilter/dnn/dnn_backend_openvino.c
@@ -33,6 +33,7 @@
 #include "libavutil/detection_bbox.h"
 #include "../internal.h"
 #include "safe_queue.h"
+#include "libavutil/fifo.h"
 #include <c_api/ie_c_api.h>
 #include "dnn_backend_common.h"
 
@@ -49,6 +50,8 @@ typedef struct OVContext {
     OVOptions options;
 } OVContext;
 
+typedef enum {UNKNOWN_MODEL = -1, BASICVSR, FRVSR} ModelType;
+
 typedef struct OVModel{
     OVContext ctx;
     DNNModel *model;
@@ -58,6 +61,9 @@ typedef struct OVModel{
     SafeQueue *request_queue;   // holds OVRequestItem
     Queue *task_queue;          // holds TaskItem
     Queue *lltask_queue;     // holds LastLevelTaskItem
+    const char *all_input_names;
+    const char *all_output_names;
+    ModelType model_type;
 } OVModel;
 
 // one request for one call to openvino
@@ -123,6 +129,9 @@ static int fill_model_input_ov(OVModel *ov_model, OVRequestItem *request)
     ie_blob_t *input_blob = NULL;
     LastLevelTaskItem *lltask;
     TaskItem *task;
+    AVFrame *tmp_frame = NULL;
+    void *in_data;
+    void *in_in_packed = NULL;
 
     lltask = ff_queue_peek_front(ov_model->lltask_queue);
     av_assert0(lltask);
@@ -149,14 +158,28 @@ static int fill_model_input_ov(OVModel *ov_model, OVRequestItem *request)
         return DNN_GENERIC_ERROR;
     }
 
-    input.height = dims.dims[2];
-    input.width = dims.dims[3];
-    input.channels = dims.dims[1];
+    if (ov_model->model_type == BASICVSR) {
+        input.channels = dims.dims[1];
+        input.height   = dims.dims[3];
+        input.width    = dims.dims[4];
+        input.dt       = precision_to_datatype(precision);
+    }
+    else {
+        input.channels = dims.dims[1];
+        input.height   = dims.dims[2];
+        input.width    = dims.dims[3];
+        input.dt       = precision_to_datatype(precision);
+    }
+
     input.data = blob_buffer.buffer;
-    input.dt = precision_to_datatype(precision);
     // all models in openvino open model zoo use BGR as input,
     // change to be an option when necessary.
     input.order = DCO_BGR;
+    in_data = input.data;
+
+    in_in_packed   = av_malloc(input.height*input.width*input.channels*sizeof(float));
+    if (!in_in_packed)
+        return AVERROR(ENOMEM);
 
     for (int i = 0; i < ctx->options.batch_size; ++i) {
         lltask = ff_queue_pop_front(ov_model->lltask_queue);
@@ -172,7 +195,29 @@ static int fill_model_input_ov(OVModel *ov_model, OVRequestItem *request)
                 if (ov_model->model->frame_pre_proc != NULL) {
                     ov_model->model->frame_pre_proc(task->in_frame, &input, ov_model->model->filter_ctx);
                 } else {
-                    ff_proc_from_frame_to_dnn(task->in_frame, &input, ctx);
+                    if (ov_model->model_type == BASICVSR && dims.dims[2] != 1) {
+                        int read_frame_num = 0;
+                        for (int i = 0; i < dims.dims[2]; i++)
+                        {
+                            if (av_fifo_can_read(task->in_queue)) {
+                                av_fifo_read(task->in_queue, &tmp_frame, 1);
+                                ff_proc_from_frame_to_dnn(tmp_frame, &input, ov_model->model->filter_ctx);
+                                memcpy((uint8_t*)in_in_packed, (uint8_t*)input.data, input.height * input.width * input.channels * sizeof(float));
+                                for (int pos = 0; pos < input.height * input.width; pos++) {
+                                    for (int ch = 0; ch < input.channels; ch++) {
+                                        ((float*)input.data)[(ch * input.height * input.width + pos)] = ((float*)in_in_packed)[(pos * input.channels + ch)];
+                                    }
+                                }
+                                input.data += input.height * input.width * input.channels * sizeof(float);
+                                read_frame_num++;
+                            }
+                        }
+                        input.data = in_data;
+                        if (read_frame_num < dims.dims[2])
+                            av_log(ctx, AV_LOG_ERROR, "Read frame number is %d less than the model requirement!!!\n", read_frame_num);
+                    } else {
+                        ff_proc_from_frame_to_dnn(task->in_frame, &input, ov_model->model->filter_ctx);
+                    }
                 }
             }
             break;
@@ -190,6 +235,8 @@ static int fill_model_input_ov(OVModel *ov_model, OVRequestItem *request)
                      + input.width * input.height * input.channels * get_datatype_size(input.dt);
     }
     ie_blob_free(&input_blob);
+    if (in_in_packed)
+        av_free(in_in_packed);
 
     return 0;
 }
@@ -208,6 +255,9 @@ static void infer_completion_callback(void *args)
     ie_blob_buffer_t blob_buffer;
     DNNData output;
     OVContext *ctx = &ov_model->ctx;
+    AVFrame *tmp_frame = NULL;
+    void *out_in_planar = NULL;
+    int offset = 0;
 
     status = ie_infer_request_get_blob(request->infer_request, task->output_names[0], &output_blob);
     if (status != OK) {
@@ -242,12 +292,25 @@ static void infer_completion_callback(void *args)
         return;
     }
 
-    output.channels = dims.dims[1];
-    output.height   = dims.dims[2];
-    output.width    = dims.dims[3];
+    if (ov_model->model_type == BASICVSR) {
+        output.channels = dims.dims[1];
+        output.height   = dims.dims[3];
+        output.width    = dims.dims[4];
+    }
+    else {
+        output.channels = dims.dims[1];
+        output.height   = dims.dims[2];
+        output.width    = dims.dims[3];
+    }
     output.dt       = precision_to_datatype(precision);
     output.data     = blob_buffer.buffer;
 
+    out_in_planar   = av_malloc(output.height*output.width*output.channels*sizeof(float));
+    if (!out_in_planar) {
+        av_log(ctx, AV_LOG_ERROR, "Failed to allocate array with %ld bytes!\n", output.height*output.width*output.channels*sizeof(float));
+        return;
+    }
+
     av_assert0(request->lltask_count <= dims.dims[0]);
     av_assert0(request->lltask_count >= 1);
     for (int i = 0; i < request->lltask_count; ++i) {
@@ -260,7 +323,25 @@ static void infer_completion_callback(void *args)
                 if (ov_model->model->frame_post_proc != NULL) {
                     ov_model->model->frame_post_proc(task->out_frame, &output, ov_model->model->filter_ctx);
                 } else {
-                    ff_proc_from_dnn_to_frame(task->out_frame, &output, ctx);
+                    if (ov_model->model_type == BASICVSR && dims.dims[2] != 1) {
+                        do {
+                            int ret = av_fifo_peek(task->out_queue, &tmp_frame, 1, offset);
+                            if (ret == 0) {
+                                memcpy((uint8_t*)out_in_planar, (uint8_t*)output.data, output.height * output.width * output.channels * sizeof(float));
+                                for (int pos = 0; pos < output.height * output.width; pos++) {
+                                    for (int ch = 0; ch < output.channels; ch++) {
+                                        ((float*)output.data)[(pos * output.channels + ch)] = ((float*)out_in_planar)[(ch * output.height * output.width + pos)];
+                                    }
+                                }
+                                ff_proc_from_dnn_to_frame(tmp_frame, &output, &ov_model->model->filter_ctx);
+                                output.data += output.height * output.width * output.channels * sizeof(float);
+                            }
+                            offset++;
+                        } while (offset != dims.dims[2]);
+                        task->out_frame = NULL;
+                    } else {
+                        ff_proc_from_dnn_to_frame(task->out_frame, &output, &ov_model->model->filter_ctx);
+                    }
                 }
             } else {
                 task->out_frame->width = output.width;
@@ -291,6 +372,8 @@ static void infer_completion_callback(void *args)
                       + output.width * output.height * output.channels * get_datatype_size(output.dt);
     }
     ie_blob_free(&output_blob);
+    if (out_in_planar)
+        av_free(out_in_planar);
 
     request->lltask_count = 0;
     if (ff_safe_queue_push_back(requestq, request) < 0) {
@@ -331,18 +414,33 @@ static int init_model_ov(OVModel *ov_model, const char *input_name, const char *
             goto err;
         }
     }
-
     // The order of dims in the openvino is fixed and it is always NCHW for 4-D data.
     // while we pass NHWC data from FFmpeg to openvino
-    status = ie_network_set_input_layout(ov_model->network, input_name, NHWC);
+    if (ov_model->model_type == BASICVSR)
+        status = ie_network_set_input_layout(ov_model->network, input_name, NCDHW);
+    else
+        status = ie_network_set_input_layout(ov_model->network, input_name, NHWC);
     if (status != OK) {
-        av_log(ctx, AV_LOG_ERROR, "Failed to set layout as NHWC for input %s\n", input_name);
+        if (status == NOT_FOUND) {
+            av_log(ctx, AV_LOG_ERROR, "Could not find \"%s\" in model, failed to set input layout as NHWC, "\
+                                      "all input(s) are: \"%s\"\n", input_name, ov_model->all_input_names);
+        } else{
+            av_log(ctx, AV_LOG_ERROR, "Failed to set layout as NHWC for input %s\n", input_name);
+        }
         ret = DNN_GENERIC_ERROR;
         goto err;
     }
-    status = ie_network_set_output_layout(ov_model->network, output_name, NHWC);
+    if (ov_model->model_type == BASICVSR)
+        status = ie_network_set_output_layout(ov_model->network, output_name, NCDHW);
+    else
+        status = ie_network_set_output_layout(ov_model->network, output_name, NHWC);
     if (status != OK) {
-        av_log(ctx, AV_LOG_ERROR, "Failed to set layout as NHWC for output %s\n", output_name);
+        if (status == NOT_FOUND) {
+            av_log(ctx, AV_LOG_ERROR, "Could not find \"%s\" in model, failed to set output layout as NHWC, "\
+                                      "all output(s) are: \"%s\"\n", input_name, ov_model->all_output_names);
+        } else{
+            av_log(ctx, AV_LOG_ERROR, "Failed to set layout as NHWC for output %s\n", output_name);
+        }
         ret = DNN_GENERIC_ERROR;
         goto err;
     }
@@ -477,6 +575,7 @@ static int execute_model_ov(OVRequestItem *request, Queue *inferenceq)
             ret = DNN_GENERIC_ERROR;
             goto err;
         }
+        //task->inference_done++;
         return 0;
     } else {
         ret = fill_model_input_ov(ov_model, request);
@@ -505,7 +604,6 @@ static int get_input_ov(void *model, DNNData *input, const char *input_name)
     OVModel *ov_model = model;
     OVContext *ctx = &ov_model->ctx;
     char *model_input_name = NULL;
-    char *all_input_names = NULL;
     IEStatusCode status;
     size_t model_input_count = 0;
     dimensions_t dims;
@@ -532,21 +630,25 @@ static int get_input_ov(void *model, DNNData *input, const char *input_name)
                 av_log(ctx, AV_LOG_ERROR, "Failed to get No.%d input's dims or precision\n", (int)i);
                 return DNN_GENERIC_ERROR;
             }
-
-            input->channels = dims.dims[1];
-            input->height   = input_resizable ? -1 : dims.dims[2];
-            input->width    = input_resizable ? -1 : dims.dims[3];
-            input->dt       = precision_to_datatype(precision);
+            if (ov_model->model_type == BASICVSR) {
+                input->channels = dims.dims[1];
+                input->height   = input_resizable ? -1 : dims.dims[3];
+                input->width    = input_resizable ? -1 : dims.dims[4];
+                input->dt       = precision_to_datatype(precision);
+            }
+            else {
+                input->channels = dims.dims[1];
+                input->height   = input_resizable ? -1 : dims.dims[2];
+                input->width    = input_resizable ? -1 : dims.dims[3];
+                input->dt       = precision_to_datatype(precision);
+            }
             return 0;
-        } else {
-            //incorrect input name
-            APPEND_STRING(all_input_names, model_input_name)
         }
 
         ie_network_name_free(&model_input_name);
     }
 
-    av_log(ctx, AV_LOG_ERROR, "Could not find \"%s\" in model, all input(s) are: \"%s\"\n", input_name, all_input_names);
+    av_log(ctx, AV_LOG_ERROR, "Could not find \"%s\" in model, all input(s) are: \"%s\"\n", input_name, ov_model->all_input_names);
     return AVERROR(EINVAL);
 }
 
@@ -659,17 +761,19 @@ static int get_output_ov(void *model, const char *input_name, int input_width, i
     int ret;
     OVModel *ov_model = model;
     OVContext *ctx = &ov_model->ctx;
-    TaskItem task;
+    TaskItem *task;
     OVRequestItem *request;
     IEStatusCode status;
     input_shapes_t input_shapes;
     DNNExecBaseParams exec_params = {
         .input_name     = input_name,
         .output_names   = &output_name,
+        .nb_input       = 1,
         .nb_output      = 1,
         .in_frame       = NULL,
         .out_frame      = NULL,
     };
+    dimensions_t dims;
 
     if (ov_model->model->func_type != DFT_PROCESS_FRAME) {
         av_log(ctx, AV_LOG_ERROR, "Get output dim only when processing frame.\n");
@@ -696,12 +800,13 @@ static int get_output_ov(void *model, const char *input_name, int input_width, i
         }
     }
 
-    ret = ff_dnn_fill_gettingoutput_task(&task, &exec_params, ov_model, input_height, input_width, ctx);
+    task = av_malloc(sizeof(*task));
+    ret = ff_dnn_fill_gettingoutput_task(task, &exec_params, ov_model, input_height, input_width, ctx);
     if (ret != 0) {
         goto err;
     }
 
-    ret = extract_lltask_from_task(ov_model->model->func_type, &task, ov_model->lltask_queue, NULL);
+    ret = extract_lltask_from_task(ov_model->model->func_type, task, ov_model->lltask_queue, NULL);
     if (ret != 0) {
         av_log(ctx, AV_LOG_ERROR, "unable to extract inference from task.\n");
         goto err;
@@ -713,13 +818,31 @@ static int get_output_ov(void *model, const char *input_name, int input_width, i
         ret = AVERROR(EINVAL);
         goto err;
     }
+    //return 0;
+
+    status = ie_network_get_output_dims(ov_model->network, output_name, &dims);
+    if (status != OK) {
+        av_log(ctx, AV_LOG_ERROR, "Failed to get No. output's dims or precision\n");
+        return DNN_GENERIC_ERROR;
+    }
+    if (ov_model->model_type == BASICVSR) {
+        *output_height   = dims.dims[3];
+        *output_width    = dims.dims[4];
+    }
+    else {
+        *output_height   = dims.dims[2];
+        *output_width    = dims.dims[3];
+    }
 
     ret = execute_model_ov(request, ov_model->lltask_queue);
-    *output_width = task.out_frame->width;
-    *output_height = task.out_frame->height;
+    //*output_width = task->out_frame->width;
+    //*output_height = task->out_frame->height;
+
+    return ret;
 err:
-    av_frame_free(&task.out_frame);
-    av_frame_free(&task.in_frame);
+    av_frame_free(&task->out_frame);
+    av_frame_free(&task->in_frame);
+    av_freep(&task);
     return ret;
 }
 
@@ -729,6 +852,10 @@ DNNModel *ff_dnn_load_model_ov(const char *model_filename, DNNFunctionType func_
     OVModel *ov_model = NULL;
     OVContext *ctx = NULL;
     IEStatusCode status;
+    size_t node_count = 0;
+    char *node_name = NULL;
+    ie_config_t config = {NULL, NULL, NULL};
+    dimensions_t dims;
 
     model = av_mallocz(sizeof(DNNModel));
     if (!model){
@@ -744,6 +871,12 @@ DNNModel *ff_dnn_load_model_ov(const char *model_filename, DNNFunctionType func_
     ov_model->model = model;
     ov_model->ctx.class = &dnn_openvino_class;
     ctx = &ov_model->ctx;
+    ov_model->all_input_names = NULL;
+    ov_model->all_output_names = NULL;
+
+    //TBD: How to decide the model is BasicVSR or other types
+    ov_model->model_type = BASICVSR;
+    //status = ie_core_load_network_from_file(ov_model->core, model_filename, "CPU", &config, &ov_model->exe_network);
 
     //parse options
     av_opt_set_defaults(ctx);
@@ -767,6 +900,45 @@ DNNModel *ff_dnn_load_model_ov(const char *model_filename, DNNFunctionType func_
         goto err;
     }
 
+    //get all the input and output names
+    status = ie_network_get_inputs_number(ov_model->network, &node_count);
+    if (status != OK) {
+        av_log(ctx, AV_LOG_ERROR, "Failed to get input count\n");
+        goto err;
+    }
+    for (size_t i = 0; i < node_count; i++) {
+        status = ie_network_get_input_name(ov_model->network, i, &node_name);
+        if (status != OK) {
+            av_log(ctx, AV_LOG_ERROR, "Failed to get No.%d input's name\n", (int)i);
+            goto err;
+        }
+        APPEND_STRING(ov_model->all_input_names, node_name)
+    }
+
+    /* For BasicVSR, read network input dimension and update the context nb_inputs value */
+    if (ov_model->model_type == BASICVSR) {
+        status = ie_network_get_input_dims(ov_model->network, node_name, &dims);
+        if (status != OK) {
+            av_log(ctx, AV_LOG_ERROR, "Failed to get input dims\n");
+            goto err;
+        }
+    }
+    filter_ctx->nb_inputs = dims.dims[2];
+
+    status = ie_network_get_outputs_number(ov_model->network, &node_count);
+    if (status != OK) {
+        av_log(ctx, AV_LOG_ERROR, "Failed to get output count\n");
+        goto err;
+    }
+    for (size_t i = 0; i < node_count; i++) {
+        status = ie_network_get_output_name(ov_model->network, i, &node_name);
+        if (status != OK) {
+            av_log(ctx, AV_LOG_ERROR, "Failed to get No.%d output's name\n", (int)i);
+            goto err;
+        }
+        APPEND_STRING(ov_model->all_output_names, node_name)
+    }
+
     model->get_input = &get_input_ov;
     model->get_output = &get_output_ov;
     model->options = options;
@@ -786,7 +958,7 @@ int ff_dnn_execute_model_ov(const DNNModel *model, DNNExecBaseParams *exec_param
     OVContext *ctx = &ov_model->ctx;
     OVRequestItem *request;
     TaskItem *task;
-    int ret;
+    int ret = 0;
 
     ret = ff_check_exec_params(ctx, DNN_OV, model->func_type, exec_params);
     if (ret != 0) {
@@ -832,7 +1004,6 @@ int ff_dnn_execute_model_ov(const DNNModel *model, DNNExecBaseParams *exec_param
                 av_log(ctx, AV_LOG_ERROR, "unable to get infer request.\n");
                 return AVERROR(EINVAL);
             }
-
             ret = execute_model_ov(request, ov_model->lltask_queue);
             if (ret != 0) {
                 return ret;
diff --git a/libavfilter/dnn_filter_common.c b/libavfilter/dnn_filter_common.c
index 5083e3de19..d7eed2904d 100644
--- a/libavfilter/dnn_filter_common.c
+++ b/libavfilter/dnn_filter_common.c
@@ -79,6 +79,16 @@ int ff_dnn_init(DnnContext *ctx, DNNFunctionType func_type, AVFilterContext *fil
     }
 
     ctx->model = (ctx->dnn_module->load_model)(ctx->model_filename, func_type, ctx->backend_options, filter_ctx);
+#if 1
+    if (filter_ctx->nb_inputs >= 1) {
+        ctx->nif = filter_ctx->nb_inputs;
+        filter_ctx->nb_inputs = 1;
+    }
+#else
+    //filter_ctx->nb_inputs = 1;
+    //ctx->nb_inputs = 1;
+#endif
+
     if (!ctx->model) {
         av_log(filter_ctx, AV_LOG_ERROR, "could not load DNN model\n");
         return AVERROR(EINVAL);
@@ -122,9 +132,12 @@ int ff_dnn_execute_model(DnnContext *ctx, AVFrame *in_frame, AVFrame *out_frame)
     DNNExecBaseParams exec_params = {
         .input_name     = ctx->model_inputname,
         .output_names   = (const char **)ctx->model_outputnames,
+        .nb_input       = ctx->nb_inputs,
         .nb_output      = ctx->nb_outputs,
         .in_frame       = in_frame,
         .out_frame      = out_frame,
+        .in_queue       = (AVFifo*)ctx->in_queue,
+        .out_queue      = (AVFifo*)ctx->out_queue,
     };
     return (ctx->dnn_module->execute_model)(ctx->model, &exec_params);
 }
diff --git a/libavfilter/dnn_filter_common.h b/libavfilter/dnn_filter_common.h
index bcdf37c815..7c65ad2749 100644
--- a/libavfilter/dnn_filter_common.h
+++ b/libavfilter/dnn_filter_common.h
@@ -35,14 +35,19 @@ typedef struct DnnContext {
     int async;
 
     char **model_outputnames;
+    uint32_t nb_inputs;
     uint32_t nb_outputs;
     DNNModule *dnn_module;
     DNNModel *model;
+    AVFifo *in_queue;
+    AVFifo *out_queue;
+    int nif;
 } DnnContext;
 
 #define DNN_COMMON_OPTIONS \
     { "model",              "path to model file",         OFFSET(model_filename),   AV_OPT_TYPE_STRING,    { .str = NULL }, 0, 0, FLAGS },\
     { "input",              "input name of the model",    OFFSET(model_inputname),  AV_OPT_TYPE_STRING,    { .str = NULL }, 0, 0, FLAGS },\
+    { "input_nb",           "input number of the mode",   OFFSET(nb_inputs),        AV_OPT_TYPE_INT,       { .i64 = 1 },    0, 48, FLAGS },\
     { "output",             "output name of the model",   OFFSET(model_outputnames_string), AV_OPT_TYPE_STRING, { .str = NULL }, 0, 0, FLAGS },\
     { "backend_configs",    "backend configs",            OFFSET(backend_options),  AV_OPT_TYPE_STRING,    { .str = NULL }, 0, 0, FLAGS },\
     { "options", "backend configs (deprecated, use backend_configs)", OFFSET(backend_options),  AV_OPT_TYPE_STRING, { .str = NULL }, 0, 0, FLAGS | AV_OPT_FLAG_DEPRECATED},\
diff --git a/libavfilter/dnn_interface.h b/libavfilter/dnn_interface.h
index ef8d7ae66f..b213af83dd 100644
--- a/libavfilter/dnn_interface.h
+++ b/libavfilter/dnn_interface.h
@@ -28,6 +28,7 @@
 
 #include <stdint.h>
 #include "libavutil/frame.h"
+#include "libavutil/fifo.h"
 #include "avfilter.h"
 
 #define DNN_GENERIC_ERROR FFERRTAG('D','N','N','!')
@@ -67,9 +68,12 @@ typedef struct DNNData{
 typedef struct DNNExecBaseParams {
     const char *input_name;
     const char **output_names;
+    uint32_t nb_input;
     uint32_t nb_output;
     AVFrame *in_frame;
     AVFrame *out_frame;
+    AVFifo *in_queue;
+    AVFifo *out_queue;
 } DNNExecBaseParams;
 
 typedef struct DNNExecClassificationParams {
diff --git a/libavfilter/vf_dnn_processing.c b/libavfilter/vf_dnn_processing.c
index cac096a19f..e24e99ea1b 100644
--- a/libavfilter/vf_dnn_processing.c
+++ b/libavfilter/vf_dnn_processing.c
@@ -28,6 +28,7 @@
 #include "libavutil/pixdesc.h"
 #include "libavutil/avassert.h"
 #include "libavutil/imgutils.h"
+#include "libavutil/fifo.h"
 #include "filters.h"
 #include "dnn_filter_common.h"
 #include "formats.h"
@@ -54,24 +55,36 @@ static const AVOption dnn_processing_options[] = {
     { "openvino",    "openvino backend flag",      0,                        AV_OPT_TYPE_CONST,     { .i64 = 2 },    0, 0, FLAGS, "backend" },
 #endif
     DNN_COMMON_OPTIONS
+    { "nif",         "number of input frames",     OFFSET(nif),              AV_OPT_TYPE_INT,       { .i64 = 3 },    1,      INT_MAX, FLAGS, "backend" },
     { NULL }
 };
 
 AVFILTER_DEFINE_CLASS(dnn_processing);
+#define MAX_PROCESSING_QUEUE 48
 
 static av_cold int init(AVFilterContext *context)
 {
     DnnProcessingContext *ctx = context->priv;
+    ctx->dnnctx.in_queue = av_fifo_alloc2(MAX_PROCESSING_QUEUE, sizeof(AVFrame *), AV_FIFO_FLAG_AUTO_GROW);
+    if (!ctx->dnnctx.in_queue)
+        return AVERROR(ENOMEM);
+    ctx->dnnctx.out_queue = av_fifo_alloc2(MAX_PROCESSING_QUEUE, sizeof(AVFrame *), AV_FIFO_FLAG_AUTO_GROW);
+    if (!ctx->dnnctx.out_queue)
+        return AVERROR(ENOMEM);
     return ff_dnn_init(&ctx->dnnctx, DFT_PROCESS_FRAME, context);
 }
 
 static const enum AVPixelFormat pix_fmts[] = {
+#if 0
     AV_PIX_FMT_RGB24, AV_PIX_FMT_BGR24,
     AV_PIX_FMT_GRAY8, AV_PIX_FMT_GRAYF32,
     AV_PIX_FMT_YUV420P, AV_PIX_FMT_YUV422P,
     AV_PIX_FMT_YUV444P, AV_PIX_FMT_YUV410P, AV_PIX_FMT_YUV411P,
     AV_PIX_FMT_NV12,
+#else
+    AV_PIX_FMT_BGR24,
     AV_PIX_FMT_NONE
+#endif
 };
 
 #define LOG_FORMAT_CHANNEL_MISMATCH()                       \
@@ -110,6 +123,7 @@ static int check_modelinput_inlink(const DNNData *model_input, const AVFilterLin
             return AVERROR(EIO);
         }
         return 0;
+    case AV_PIX_FMT_GRAY8:
     case AV_PIX_FMT_GRAYF32:
     case AV_PIX_FMT_YUV420P:
     case AV_PIX_FMT_YUV422P:
@@ -284,8 +298,33 @@ static int activate(AVFilterContext *filter_ctx)
 
     FF_FILTER_FORWARD_STATUS_BACK(outlink, inlink);
 
-    do {
-        // drain all input frames
+    if (ctx->dnnctx.nif <= 0)
+    {
+        av_log(ctx, AV_LOG_ERROR, "the model reflects NIF is %d, please check \n",
+                                   ctx->dnnctx.nif);
+        return AVERROR(EIO);
+    }
+
+    if (ctx->dnnctx.nif == 1) {
+        do {
+            // drain all input frames
+            ret = ff_inlink_consume_frame(inlink, &in);
+            if (ret < 0)
+                return ret;
+            else if (ret > 0) {
+                out = ff_get_video_buffer(outlink, outlink->w, outlink->h);
+                if (!out) {
+                    av_frame_free(&in);
+                    return AVERROR(ENOMEM);
+                }
+                av_frame_copy_props(out, in);
+                if (ff_dnn_execute_model(&ctx->dnnctx, in, out) != 0) {
+                    return AVERROR(EIO);
+                }
+            }
+        } while (ret > 0);
+    }
+    else {
         ret = ff_inlink_consume_frame(inlink, &in);
         if (ret < 0)
             return ret;
@@ -296,13 +335,30 @@ static int activate(AVFilterContext *filter_ctx)
                 return AVERROR(ENOMEM);
             }
             av_frame_copy_props(out, in);
+            av_fifo_write(ctx->dnnctx.in_queue, &in, 1);
+            av_fifo_write(ctx->dnnctx.out_queue, &out, 1);
+        }
+        if (av_fifo_can_read(ctx->dnnctx.in_queue) == ctx->dnnctx.nif) {
             if (ff_dnn_execute_model(&ctx->dnnctx, in, out) != 0) {
                 return AVERROR(EIO);
             }
+                AVFrame *in_frame = NULL;
+                AVFrame *out_frame = NULL;
+                async_state = ff_dnn_get_result(&ctx->dnnctx, &in_frame, &out_frame);
+                if (async_state == DAST_SUCCESS) {
+                    for (int i = 0; i < ctx->dnnctx.nif; i++) {
+                        av_fifo_read(ctx->dnnctx.out_queue, &out_frame, 1);
+                        ret = ff_filter_frame(outlink, out_frame);
+                        if (ret < 0)
+                            return ret;
+                        got_frame += 1;
+                    }
+                }
         }
-    } while (ret > 0);
+    }
 
     // drain all processed frames
+#if 0
     do {
         AVFrame *in_frame = NULL;
         AVFrame *out_frame = NULL;
@@ -317,6 +373,7 @@ static int activate(AVFilterContext *filter_ctx)
             got_frame = 1;
         }
     } while (async_state == DAST_SUCCESS);
+#endif
 
     // if frame got, schedule to next filter
     if (got_frame)
@@ -325,7 +382,7 @@ static int activate(AVFilterContext *filter_ctx)
     if (ff_inlink_acknowledge_status(inlink, &status, &pts)) {
         if (status == AVERROR_EOF) {
             int64_t out_pts = pts;
-            ret = flush_frame(outlink, pts, &out_pts);
+            //ret = flush_frame(outlink, pts, &out_pts);
             ff_outlink_set_status(outlink, status, out_pts);
             return ret;
         }
-- 
2.34.1

