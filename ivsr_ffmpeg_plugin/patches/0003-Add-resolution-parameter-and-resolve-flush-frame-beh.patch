From 204ba575d73b05d93486bb2b5905a238427f9562 Mon Sep 17 00:00:00 2001
From: dahanhan <dahan.han@intel.com>
Date: Tue, 11 Apr 2023 08:53:42 +0800
Subject: [PATCH] Add resolution parameter and resolve flush frame behavior

The resolution of filter input and output video are added in the AVOptions
The flush frame is implemented to support multi-frame processing

Signed-off-by: dahanhan <dahan.han@intel.com>
---
 libavfilter/dnn/dnn_backend_openvino.c |  4 +--
 libavfilter/dnn_filter_common.c        | 10 +++----
 libavfilter/dnn_filter_common.h        |  4 +++
 libavfilter/vf_dnn_processing.c        | 41 +++++++++++++++++---------
 4 files changed, 37 insertions(+), 22 deletions(-)

diff --git a/libavfilter/dnn/dnn_backend_openvino.c b/libavfilter/dnn/dnn_backend_openvino.c
index 77585e3453..1af05ed0d4 100644
--- a/libavfilter/dnn/dnn_backend_openvino.c
+++ b/libavfilter/dnn/dnn_backend_openvino.c
@@ -1100,8 +1100,8 @@ void ff_dnn_free_model_ov(DNNModel **model)
 
         while (ff_queue_size(ov_model->task_queue) != 0) {
             TaskItem *item = ff_queue_pop_front(ov_model->task_queue);
-            av_frame_free(&item->in_frame);
-            av_frame_free(&item->out_frame);
+            //av_frame_free(&item->in_frame);
+            //av_frame_free(&item->out_frame);
             av_freep(&item);
         }
         ff_queue_destroy(ov_model->task_queue);
diff --git a/libavfilter/dnn_filter_common.c b/libavfilter/dnn_filter_common.c
index d7eed2904d..e04498e0a0 100644
--- a/libavfilter/dnn_filter_common.c
+++ b/libavfilter/dnn_filter_common.c
@@ -79,15 +79,13 @@ int ff_dnn_init(DnnContext *ctx, DNNFunctionType func_type, AVFilterContext *fil
     }
 
     ctx->model = (ctx->dnn_module->load_model)(ctx->model_filename, func_type, ctx->backend_options, filter_ctx);
-#if 1
-    if (filter_ctx->nb_inputs >= 1) {
+    if (filter_ctx->nb_inputs != ctx->nif) {
+        av_log(filter_ctx, AV_LOG_WARNING, "nif is different to the model requirement, use model setting!\n");
         ctx->nif = filter_ctx->nb_inputs;
         filter_ctx->nb_inputs = 1;
     }
-#else
-    //filter_ctx->nb_inputs = 1;
-    //ctx->nb_inputs = 1;
-#endif
+    else
+        filter_ctx->nb_inputs = 1;
 
     if (!ctx->model) {
         av_log(filter_ctx, AV_LOG_ERROR, "could not load DNN model\n");
diff --git a/libavfilter/dnn_filter_common.h b/libavfilter/dnn_filter_common.h
index 7c65ad2749..ea58c03d5e 100644
--- a/libavfilter/dnn_filter_common.h
+++ b/libavfilter/dnn_filter_common.h
@@ -42,6 +42,10 @@ typedef struct DnnContext {
     AVFifo *in_queue;
     AVFifo *out_queue;
     int nif;
+    int input_width;
+    int input_height;
+    int output_width;
+    int output_height;
 } DnnContext;
 
 #define DNN_COMMON_OPTIONS \
diff --git a/libavfilter/vf_dnn_processing.c b/libavfilter/vf_dnn_processing.c
index e24e99ea1b..6725bc9fb3 100644
--- a/libavfilter/vf_dnn_processing.c
+++ b/libavfilter/vf_dnn_processing.c
@@ -55,7 +55,11 @@ static const AVOption dnn_processing_options[] = {
     { "openvino",    "openvino backend flag",      0,                        AV_OPT_TYPE_CONST,     { .i64 = 2 },    0, 0, FLAGS, "backend" },
 #endif
     DNN_COMMON_OPTIONS
-    { "nif",         "number of input frames",     OFFSET(nif),              AV_OPT_TYPE_INT,       { .i64 = 3 },    1,      INT_MAX, FLAGS, "backend" },
+    { "nif",         "number of input frames",     OFFSET(nif),              AV_OPT_TYPE_INT,       { .i64 = 3 },    1,      INT_MAX, FLAGS },
+    { "input_width", "input video width",     OFFSET(input_width),              AV_OPT_TYPE_INT,       { .i64 = 1920 },    1, INT_MAX, FLAGS },
+    { "input_height","input video height",     OFFSET(input_height),              AV_OPT_TYPE_INT,       { .i64 = 1080 },    1, INT_MAX, FLAGS },
+    { "output_width","output video width",     OFFSET(output_width),              AV_OPT_TYPE_INT,       { .i64 = 3840 },    1, INT_MAX, FLAGS },
+    { "output_height", "output video height",     OFFSET(output_height),              AV_OPT_TYPE_INT,       { .i64 = 2160 },    1, INT_MAX, FLAGS },
     { NULL }
 };
 
@@ -158,6 +162,9 @@ static int config_input(AVFilterLink *inlink)
         return result;
     }
 
+    if ((ctx->dnnctx.input_width != model_input.width) || (ctx->dnnctx.input_height != model_input.height)) 
+        av_log(ctx, AV_LOG_WARNING, "The command seting of input width or height is different to the model requirement, use the model setting!\n");
+
     check = check_modelinput_inlink(&model_input, inlink);
     if (check != 0) {
         return check;
@@ -217,6 +224,8 @@ static int config_output(AVFilterLink *outlink)
         av_log(ctx, AV_LOG_ERROR, "could not get output from the model\n");
         return result;
     }
+    if ((ctx->dnnctx.output_width != outlink->w) || (ctx->dnnctx.output_height != outlink->h))
+        av_log(ctx, AV_LOG_WARNING, "The command seting of output width or height is different to the model requirement, use the model setting!\n");
 
     prepare_uv_scale(outlink);
 
@@ -259,27 +268,31 @@ static int flush_frame(AVFilterLink *outlink, int64_t pts, int64_t *out_pts)
     DnnProcessingContext *ctx = outlink->src->priv;
     int ret;
     DNNAsyncStatusType async_state;
+    AVFrame *in_frame = NULL;
+    AVFrame *out_frame = NULL;
 
     ret = ff_dnn_flush(&ctx->dnnctx);
     if (ret != 0) {
         return -1;
     }
 
+    av_usleep(15000000);
     do {
-        AVFrame *in_frame = NULL;
-        AVFrame *out_frame = NULL;
         async_state = ff_dnn_get_result(&ctx->dnnctx, &in_frame, &out_frame);
-        if (out_frame) {
-            if (isPlanarYUV(in_frame->format))
-                copy_uv_planes(ctx, out_frame, in_frame);
-            av_frame_free(&in_frame);
-            ret = ff_filter_frame(outlink, out_frame);
-            if (ret < 0)
-                return ret;
-            if (out_pts)
-                *out_pts = out_frame->pts + pts;
+        if (async_state) {
+            if (av_fifo_can_read(ctx->dnnctx.out_queue) >= ctx->dnnctx.nif) {
+                for (int i = 0; i < ctx->dnnctx.nif; i++) {
+                    av_fifo_read(ctx->dnnctx.out_queue, &out_frame, 1);
+                    ret = ff_filter_frame(outlink, out_frame);
+                    av_usleep(5000);
+                    if (ret < 0)
+                        return ret;
+                }
+            }
+            else
+                break;
         }
-        av_usleep(5000);
+        av_usleep(15000000);
     } while (async_state >= DAST_NOT_READY);
 
     return 0;
@@ -382,7 +395,7 @@ static int activate(AVFilterContext *filter_ctx)
     if (ff_inlink_acknowledge_status(inlink, &status, &pts)) {
         if (status == AVERROR_EOF) {
             int64_t out_pts = pts;
-            //ret = flush_frame(outlink, pts, &out_pts);
+            ret = flush_frame(outlink, pts, &out_pts);
             ff_outlink_set_status(outlink, status, out_pts);
             return ret;
         }
-- 
2.17.1

