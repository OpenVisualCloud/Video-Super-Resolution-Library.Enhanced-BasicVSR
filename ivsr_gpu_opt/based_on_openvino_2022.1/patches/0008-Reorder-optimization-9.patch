From 7ff1dda8c9b2fc5a92421663415ca0ba5b626f4e Mon Sep 17 00:00:00 2001
From: "Jiang, Renzhi" <renzhi.jiang@intel.com>
Date: Thu, 22 Sep 2022 13:13:05 +0800
Subject: [PATCH 08/17] Reorder optimization (#9)

* optimize the reorder logic for concatenation

* optimize reorder kernel to improve performance

* remove unneccesary reorder before concate op
---
 .../graph/graph_optimizer/reorder_inputs.cpp  |  38 +++-
 .../intel_gpu/src/graph/layout_optimizer.cpp  |   4 +
 .../concatenation_kernel_simple_ref.cpp       |  26 +--
 .../reorder/reorder_kernel_fast_b1.cpp        |   6 +-
 .../concatenation_gpu_simple_ref.cl           |   4 +-
 .../core/cl_kernels/reorder_data_fast_b1.cl   | 178 ++----------------
 6 files changed, 75 insertions(+), 181 deletions(-)

diff --git a/src/plugins/intel_gpu/src/graph/graph_optimizer/reorder_inputs.cpp b/src/plugins/intel_gpu/src/graph/graph_optimizer/reorder_inputs.cpp
index 13421c6913..778a12ece5 100644
--- a/src/plugins/intel_gpu/src/graph/graph_optimizer/reorder_inputs.cpp
+++ b/src/plugins/intel_gpu/src/graph/graph_optimizer/reorder_inputs.cpp
@@ -259,6 +259,7 @@ reorder_cnt count_reorders_in_dir(const std::map<program_node*, format::type>& f
     size_t cnt = 0;
     size_t size = 0;
     auto sel_fmt = fmt_map.at(node);
+    auto last_child_fmt = format::any;
 
     for (auto next : travel_direction_wrapper<dir>::next_nodes(node)) {
         if (!next->is_in_data_flow())
@@ -266,12 +267,22 @@ reorder_cnt count_reorders_in_dir(const std::map<program_node*, format::type>& f
 
         auto next_fmt = fmt_map.at(next);
 
-        if (next_fmt == format::any ||
-            (sel_fmt != next_fmt &&
+        if (next_fmt == format::any) {
+            auto out_fmt = next->get_output_layout().format;
+
+            if (out_fmt == last_child_fmt)
+                continue;
+            if (lo.is_format_supported(*node, out_fmt)) {
+                next_fmt = out_fmt;
+                last_child_fmt = out_fmt;
+            }
+        }
+
+        if (sel_fmt != next_fmt &&
              !lo.can_fuse_reorder(*travel_direction_wrapper<dir>::first(node, next),
                                   *travel_direction_wrapper<dir>::second(node, next),
                                   travel_direction_wrapper<dir>::first(sel_fmt, next_fmt),
-                                  travel_direction_wrapper<dir>::second(sel_fmt, next_fmt)))) {
+                                  travel_direction_wrapper<dir>::second(sel_fmt, next_fmt))) {
             cnt += 1;
             size += travel_direction_wrapper<dir>::first(node, next)->get_output_layout().count();
         }
@@ -309,10 +320,28 @@ void minimize_local_reorders(program& p, std::map<program_node*, format::type>&
                 if (!(io_formats.size() == 1 && io_formats.count(preferred_format) == 0))
                     continue;
             } else {
+                // continue;
+            }
+        }
+
+        //minimize reorder before and after concat
+        if (node->is_type<concatenation>()) {
+            auto perfered_format = format::any;
+            for (auto user : node->get_users()) {
+                auto user_fmt = fmt_map.at(user);
+                if (user_fmt != format::any &&
+                    lo.is_format_supported(*node, user_fmt)) {
+                    preferred_format = user_fmt;
+                    break;
+                }
+            }
+            if (preferred_format != format::any) {
+                fmt_map.at(node) = perfered_format;
                 continue;
             }
         }
 
+
         if (fmt_map.at(node) == format::any) {
             auto out_fmt = node->get_output_layout().format;
             if (lo.is_format_supported(*node, out_fmt)) {
@@ -437,6 +466,9 @@ void insert_reorders(program& p, const std::map<program_node*, format::type>& fm
         if (fmt == format::any || format::is_image(fmt))
             continue;
 
+        if (node->is_type<concatenation>())
+            continue;
+
         insert_reorders_in_dir<direction_e::backwards>(p, fmt_map, rf, lo, node);
     }
 }
diff --git a/src/plugins/intel_gpu/src/graph/layout_optimizer.cpp b/src/plugins/intel_gpu/src/graph/layout_optimizer.cpp
index 1227827038..2815ad9b30 100644
--- a/src/plugins/intel_gpu/src/graph/layout_optimizer.cpp
+++ b/src/plugins/intel_gpu/src/graph/layout_optimizer.cpp
@@ -216,6 +216,10 @@ bool layout_optimizer::can_fuse_reorder(program_node& prev, program_node& next,
     if (next.is_type<reorder>())
         return true;
 
+    //no need add reorder before concate
+    // if (next.is_type<concatenation>())
+    //     return true;
+
     // resample_opt kernel can work cross-layout between fsv16 and fsv32
     if (next.is_type<resample>() &&
         (fmt_prev == format::b_fs_yx_fsv16 || fmt_prev == format::b_fs_yx_fsv32
diff --git a/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/concatenation/concatenation_kernel_simple_ref.cpp b/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/concatenation/concatenation_kernel_simple_ref.cpp
index f359293519..a374e81bac 100644
--- a/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/concatenation/concatenation_kernel_simple_ref.cpp
+++ b/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/concatenation/concatenation_kernel_simple_ref.cpp
@@ -62,20 +62,20 @@ bool ConcatenationKernel_simple_Ref::Validate(const Params& p, const optional_pa
         return false;
     }
 
-    const concatenation_params& params = static_cast<const concatenation_params&>(p);
+    // const concatenation_params& params = static_cast<const concatenation_params&>(p);
 
-    // all inputs have to have same layout (exept 3D: bfzyx, b_fs_zyx_fsv16, and bs_fs_zyx_bsv16_fsv16)
-    auto same_layout = params.inputs[0].GetLayout();
-    for (const auto& lt : params.inputs) {
-        auto cur_layout = lt.GetLayout();
-        if ((cur_layout == DataLayout::bfzyx || cur_layout == DataLayout::b_fs_zyx_fsv16 || cur_layout == DataLayout::bs_fs_zyx_bsv16_fsv16) &&
-            (same_layout == DataLayout::bfzyx || same_layout == DataLayout::b_fs_zyx_fsv16 || same_layout == DataLayout::bs_fs_zyx_bsv16_fsv16
-            || same_layout == DataLayout::bs_fs_yx_bsv32_fsv32)) {
-            continue;
-        } else if (cur_layout != same_layout) {
-            return false;
-        }
-    }
+    // // all inputs have to have same layout (exept 3D: bfzyx, b_fs_zyx_fsv16, and bs_fs_zyx_bsv16_fsv16)
+    // auto same_layout = params.inputs[0].GetLayout();
+    // for (const auto& lt : params.inputs) {
+    //     auto cur_layout = lt.GetLayout();
+    //     if ((cur_layout == DataLayout::bfzyx || cur_layout == DataLayout::b_fs_zyx_fsv16 || cur_layout == DataLayout::bs_fs_zyx_bsv16_fsv16) &&
+    //         (same_layout == DataLayout::bfzyx || same_layout == DataLayout::b_fs_zyx_fsv16 || same_layout == DataLayout::bs_fs_zyx_bsv16_fsv16
+    //         || same_layout == DataLayout::bs_fs_yx_bsv32_fsv32)) {
+    //         continue;
+    //     } else if (cur_layout != same_layout) {
+    //         return false;
+    //     }
+    // }
 
     return true;
 }
diff --git a/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/reorder/reorder_kernel_fast_b1.cpp b/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/reorder/reorder_kernel_fast_b1.cpp
index d2716afa06..df5fc3af5f 100644
--- a/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/reorder/reorder_kernel_fast_b1.cpp
+++ b/src/plugins/intel_gpu/src/kernel_selector/core/actual_kernels/reorder/reorder_kernel_fast_b1.cpp
@@ -87,9 +87,9 @@ ReorderKernelFastBatch1::DispatchData ReorderKernelFastBatch1::SetDefault(const
 
     unsigned int gws = (unsigned int)output.LogicalSize();
 
-    dispatchData.gws[0] = Align(gws, 32);
-    dispatchData.gws[1] = 1;
-    dispatchData.gws[2] = 1;
+    dispatchData.gws[0] = output.X().v * output.Z().v;
+    dispatchData.gws[1] = output.Y().v * output.W().v;
+    dispatchData.gws[2] = output.Feature().v * output.Batch().v;
 
     dispatchData.lws[0] = 32;
     dispatchData.lws[1] = 1;
diff --git a/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/concatenation_gpu_simple_ref.cl b/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/concatenation_gpu_simple_ref.cl
index 17de40c33c..f04d66adbb 100644
--- a/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/concatenation_gpu_simple_ref.cl
+++ b/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/concatenation_gpu_simple_ref.cl
@@ -5,8 +5,6 @@
 #include "include/batch_headers/data_types.cl"
 #include "include/batch_headers/fetch_data.cl"
 
-#pragma OPENCL EXTENSION cl_intel_printf : enable
-
 ///////////////////////// Input Index /////////////////////////
 inline uint FUNC(get_input_index)(uint b, uint f, uint w, uint z, uint y, uint x)
 {
@@ -16,6 +14,8 @@ inline uint FUNC(get_input_index)(uint b, uint f, uint w, uint z, uint y, uint x
     return GET_DATA_INDEX_5D(INPUT0, b, f, z, y, x);
 #elif INPUT0_SIMPLE && INPUT0_DIMS == 6
     return GET_DATA_INDEX_6D(INPUT0, b, f, w, z, y, x);
+#elif INPUT0_LAYOUT_B_FS_YX_FSV16
+    return GET_DATA_B_FS_YX_FSV16_INDEX(INPUT0, b, f, y, x);
 #elif INPUT0_LAYOUT_B_FS_ZYX_FSV16
     return GET_DATA_B_FS_ZYX_FSV16_INDEX(INPUT0, b, f, z, y, x);
 #elif INPUT0_LAYOUT_BS_FS_ZYX_BSV16_FSV16
diff --git a/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/reorder_data_fast_b1.cl b/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/reorder_data_fast_b1.cl
index e8eb3cca02..4e72483721 100644
--- a/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/reorder_data_fast_b1.cl
+++ b/src/plugins/intel_gpu/src/kernel_selector/core/cl_kernels/reorder_data_fast_b1.cl
@@ -58,170 +58,28 @@ KERNEL (reorder_data_fast_b1)(
 #endif
     )
 {
-    uint data_idx = get_global_id(0);
-    if(data_idx >= ELEMENTS_COUNT)
-        return;
-
-#if !CHANGE_DATA_TYPE_ONLY
- // We're checking output layout instead of input layout intentionally for performance reason
-#if defined OUTPUT_LAYOUT_BFYX
-    uint tmp_data_idx = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    data_idx = tmp_data_idx;
-
-    // We're first iterating over Y then over X for performance reason
-    // Otherwise we could compute X and Y in reverse order
-    tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-    const uint z = 0;
-    const uint w = 0;
-#elif defined OUTPUT_LAYOUT_YXFB
-    // We're first iterating over Y then over X for performance reason
-    // Otherwise we could compute X and Y in reverse order
-    uint tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
+#if OUTPUT_SIZE_Z == 1
+    const uint x = get_global_id(0);
     const uint z = 0;
-    const uint w = 0;
-#elif defined OUTPUT_LAYOUT_BFYX_8F
-    uint tmp_data_idx = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    data_idx = tmp_data_idx;
-
-    // We're first iterating over Y then over X for performance reason
-    // Otherwise we could compute X and Y in reverse order
-    tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-    const uint z = 0;
-    const uint w = 0;
-#elif defined OUTPUT_LAYOUT_BFYX_16F
-    uint tmp_data_idx = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    data_idx = tmp_data_idx;
-
-    // We're first iterating over Y then over X for performance reason
-    // Otherwise we could compute X and Y in reverse order
-    tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-    const uint z = 0;
-    const uint w = 0;
-#elif defined OUTPUT_LAYOUT_BFZYX
-    uint tmp_data_idx = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Z;
-    const uint z = data_idx - tmp_data_idx * OUTPUT_SIZE_Z;
-    const uint w = 0;
-#elif defined OUTPUT_LAYOUT_B_FS_ZYX_FSV16
-    uint tmp_data_idx = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Z;
-    const uint z = data_idx - tmp_data_idx * OUTPUT_SIZE_Z;
-    const uint w = 0;
-#elif defined OUTPUT_LAYOUT_BFWZYX
-    uint tmp_data_idx = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_Z;
-    const uint z = data_idx - tmp_data_idx * OUTPUT_SIZE_Z;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx  = data_idx / OUTPUT_SIZE_W;
-    const uint w = data_idx - tmp_data_idx * OUTPUT_SIZE_W;
-#else // BYXF?
-    uint tmp_data_idx = data_idx / OUTPUT_BATCH_NUM;
-    const uint b = data_idx - tmp_data_idx * OUTPUT_BATCH_NUM;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_SIZE_Y;
-    const uint y = data_idx - tmp_data_idx * OUTPUT_SIZE_Y;
-    data_idx = tmp_data_idx;
-
-    tmp_data_idx = data_idx / OUTPUT_SIZE_X;
-    const uint x = data_idx - tmp_data_idx * OUTPUT_SIZE_X;
-    data_idx = tmp_data_idx;
+#else
+    const uint x = (uint)get_global_id(0) % OUTPUT_SIZE_X;
+    const uint z = (uint)get_global_id(0) / OUTPUT_SIZE_X;
+#endif
 
-    tmp_data_idx  = data_idx / OUTPUT_FEATURE_NUM;
-    const uint f = data_idx - tmp_data_idx * OUTPUT_FEATURE_NUM;
-    const uint z = 0;
+#if OUTPUT_SIZE_W == 1
+    const uint y = get_global_id(1);
     const uint w = 0;
+#else
+    const uint y = (uint)get_global_id(1) % OUTPUT_SIZE_Y;
+    const uint w = (uint)get_global_id(1) / OUTPUT_SIZE_Y;
 #endif
+
+#if OUTPUT_BATCH_NUM == 1
+    const uint f = get_global_id(2);
+    const uint b = 0;
+#else
+    const uint f = (uint)get_global_id(2) % OUTPUT_FEATURE_NUM;
+    const uint b = (uint)get_global_id(2) / OUTPUT_FEATURE_NUM;
 #endif
 
 #if CHANGE_DATA_TYPE_ONLY
-- 
2.25.1

